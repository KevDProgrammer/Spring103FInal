#include <Adafruit_CircuitPlayground.h>

//setting up score holder
int score = 100;

//setting up level set (set to 0 for case 0, 1 for case 1)
volatile int levelCounter = 0;

//setting up action keys
const int leftButton = 4;
const int rightButton = 5;

//establishing action flags
volatile bool leftButtonFlag = false;
volatile bool rightButtonFlag = false;

//detection for if left button is changed
void leftButtonPressed()
{
  leftButtonFlag = true;
}

//detection for if right button is changed
void rightButtonPressed()
{
  rightButtonFlag = true;
}

void setup() 
{
  CircuitPlayground.begin();
  Serial.begin(9600);

  pinMode(leftButton, INPUT_PULLDOWN); //Left button, pulldown enabled.
  pinMode(rightButton, INPUT_PULLDOWN); //Right button, pulldown enabled.

  attachInterrupt(digitalPinToInterrupt(leftButton), leftButtonPressed, RISING);
  attachInterrupt(digitalPinToInterrupt(rightButton), rightButtonPressed, RISING);
}

void loop() 
{
  switch(levelCounter)
  {
    case 0:
      levelOne();
      break;
    case 1:
      levelTwo();
      break;
    case 2:
      scoreBoard();
      break;
    default:
    CircuitPlayground.clearPixels();
  }
}

void levelOne() //Case 0: The first level layout (1 Target - Slow Speed)
{
  CircuitPlayground.setPixelColor(4, 0xFFFF00); //establish target location

  for(int i = 0; i < 10; i++) //go through all the led one at a time
  {

    Serial.println(score); //display current score in serial (optional feature)

    if(i != 4) //if current pin isn't 4, current led turn white, wait, current led turn off.
    {
      CircuitPlayground.setPixelColor(i, 0xFFFFFF);
      delay(500);
      CircuitPlayground.setPixelColor(i, 0x000000);

      if(leftButtonFlag || rightButtonFlag) //Briefly blink red and reduce score by 25%, follow by beep.
      {
        if(score > 0)
        {
          CircuitPlayground.setPixelColor(i, 0xFF0000);
          delay(50);
          CircuitPlayground.setPixelColor(i, 0x000000);
          CircuitPlayground.playTone(130.81, 100); //C3 Note - 1/10th s
          delay(50);
          score = score - 25;
        }
        if(score == 0)
        {
          levelCounter = 2; //cue game over
        }
        leftButtonFlag = false;
        rightButtonFlag = false;
      }
    }
    else if(i = 4) //if current pin is 4, current led turns yellow (stays yellow)...wait, and move on.
    {
      CircuitPlayground.setPixelColor(i, 0xFFFF00);
      delay(500);

      if(leftButtonFlag) //if left button detect a click, turn off led and play a beep. Display score and play melody. Level counter +1.
      {
        CircuitPlayground.setPixelColor(i, 0x000000);
        leftButtonFlag = false;
        CircuitPlayground.playTone(261.63, 100); //C4 Note - 1/10th s
        CircuitPlayground.clearPixels();
        delay(1000);
        //Play Advancing Melody
        CircuitPlayground.playTone(261.63, 100); //C4 - 1/10th s
        CircuitPlayground.playTone(293.67, 100); //D4 - 1/10th s
        CircuitPlayground.playTone(329.63, 100); //E4 - 1/10th s

        delay(1000);
        levelCounter = 1; //set level counter to level 2 (case 1)
      }
    }
  }
}

void levelTwo() //Case 1: The second level layout (2 Target - Fast Speed)
{
  CircuitPlayground.setPixelColor(2, 0xFFFF00); //establish yellow target location
  CircuitPlayground.setPixelColor(5, 0xFFC0CB); //establish pink target location

  for(int i = 0; i < 10; i++) //go through all the led one at a time
  {

    Serial.println(score); //display current score in serial (optional feature)

    if(i != 2 && i != 5) //if pin isn't at 2 nor 5, blink current led pin white.
    {
      CircuitPlayground.setPixelColor(i, 0xFFFFFF);
      delay(250);
      CircuitPlayground.setPixelColor(i, 0x000000);

      if(leftButtonFlag || rightButtonFlag) //If LH or RH were pressed during this, briefly blink red and reduce score by 25%, follow by beep.
      {
        if(score > 0)
        {
          CircuitPlayground.setPixelColor(i, 0xFF0000);
          delay(50);
          CircuitPlayground.setPixelColor(i, 0x000000);
          CircuitPlayground.playTone(130.81, 100); //C3 Note - 1/10th s
          delay(50);
          score = score - 25;
        }
        if(score == 0)
        {
          levelCounter = 2; //cue game over
        }
        leftButtonFlag = false;
        rightButtonFlag = false;
      }
    }
    else//else if current pin is 2 or 5.
    {
      if(i == 2) //if current pin is 2, current led turns yellow (stays yellow)...wait, and move on.
      {
        CircuitPlayground.setPixelColor(i, 0xFFFF00);
        delay(250);

        if(leftButtonFlag) //if left button detect a click, turn off target led and play a beep.
        {
          CircuitPlayground.setPixelColor(i, 0x000000);
          leftButtonFlag = false;
          CircuitPlayground.playTone(261.63, 100); //C4 Note - 1/10th s
        }
      }
      else if(i == 5) //if current pin is 5, current led turns pink (stays pink)...wait, and move on.
      {
        CircuitPlayground.setPixelColor(i, 0xFFC0CB);
        delay(250);

        if(rightButtonFlag) //if right button detect a click, turn off target led and play a beep. 
        {
          CircuitPlayground.setPixelColor(i, 0x000000);
          rightButtonFlag = false;
          CircuitPlayground.playTone(261.63, 100); //C4 Note - 1/10th s
        }
      }
    }
  }
  if(CircuitPlayground.strip.getPixelColor(2) == 0x000000 && CircuitPlayground.strip.getPixelColor(5) == 0x000000) //if led pin 2 & 5 are out, clear level.
  {
      CircuitPlayground.clearPixels();
      //[Play Sun's Song (LoZ)]
      CircuitPlayground.playTone(440.00, 250); //A4 - 1/4th s
      CircuitPlayground.playTone(349.23, 250); //F4 - 1/4th s
      CircuitPlayground.playTone(587.33, 125); //D5 - 1/8th s
      delay(375); // rest - 3/8th s
      CircuitPlayground.playTone(440.00, 250); //A4 - 1/4th s
      CircuitPlayground.playTone(349.23, 250); //F4 - 1/4th s
      CircuitPlayground.playTone(587.33, 125); //D5 - 1/8th s
      delay(375); // rest - 3/8th s
      CircuitPlayground.playTone(440.00, 125); //A4 - 1/8th s
      CircuitPlayground.playTone(493.88, 125); //B4 - 1/8th s
      CircuitPlayground.playTone(523.25, 125); //C5 - 1/8th s
      CircuitPlayground.playTone(587.33, 125); //D5 - 1/8th s
      CircuitPlayground.playTone(659.26, 125); //E5 - 1/8th s
      CircuitPlayground.playTone(698.46, 125); //F5 - 1/8th s
      CircuitPlayground.playTone(783.99, 250); //A4 - 1/4th s
      delay(1000);
      levelCounter = 2; //set level counter to level 3 - Scoreboard (case 2)
  }
}

void scoreBoard() //case 2: Score Display (Occur during game over OR all level cleared)
{
  CircuitPlayground.clearPixels(); //clear board
  delay(1000);
  if(score == 0)
  {
    CircuitPlayground.setPixelColor(0, 0xFF0000); //led 1 shines red
    //Play Game Over (Super Mario World)
    CircuitPlayground.playTone(220.00, 500); //A3 - 1/2th s
    CircuitPlayground.playTone(174.61, 250); //F3 - 1/4th s
    CircuitPlayground.playTone(130.81, 250); //C3 - 1/4th s
    CircuitPlayground.playTone(220.00, 500); //A3 - 1/2th s
    CircuitPlayground.playTone(164.81, 500); //E3 - 1/2th s
    CircuitPlayground.playTone(196.00, 1000); //G3 - 1 s
    delay(3000);
  }
  if(score == 25)
  {
    for(int i = 0; i < 3; i++) //led 1-3 shines orange
    {
      CircuitPlayground.setPixelColor(i, 0xFFA500);
    }
    delay(3000);
  }
  if(score == 50)
  {
    for(int i = 0; i < 5; i++) //led 1-5 shines yellow
    {
      CircuitPlayground.setPixelColor(i, 0xFFFF00);
    }
    delay(3000);
  }
  if(score == 75)
  {
    for(int i = 0; i < 8; i++) //led 1-8 shines green
    {
      CircuitPlayground.setPixelColor(i, 0x00FF00);
    }
    delay(3000);
  }
  if(score == 100)
  {
    for(int i = 0; i < 10; i++) //led 1-10 shines green
    {
      CircuitPlayground.setPixelColor(i, 0x00FF00);
    }
    delay(3000);
  }
  CircuitPlayground.clearPixels();
  levelCounter = 3; //set level counter to level 4 - End Game (case 3)
}
